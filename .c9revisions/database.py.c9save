{"ts":1352618151768,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"from sqlobject import *\nfrom sqlobject.mysql import builder\nfrom sqlobject.inheritance import *\nimport bcrypt, datetime, time, markdown, os, urllib, uuid, hashlib\n__all__ = ['Game','User','Player','Station','Admin','Tag','Checkin','Cure','Post','Comment','Snapshot','Score','Session', 'Twitter']\nNAMESPACE = 'hvsi'\nhost = 'localhost'\ndb = 'uottawae_hvsi'\nuser = 'uottawae_hvsi'\npassw = 'hvs.i'\nif '_devel' in os.getcwd():\n\tdb = 'hvsi_devel'\n\tuser = 'hvsi'\n\tpassw = 'hvsi'\nif 'RDS_HOSTNAME' in os.environ:\n\thost = os.environ['RDS_HOSTNAME']\n\tdb = os.environ['RDS_DB_NAME']\n\tuser = os.environ['RDS_USERNAME']\n\tpassw = os.environ['RDS_PASSWORD']\nsqlhub.processConnection = connectionForURI('mysql://%s:%s@%s/%s' % (user, passw, host, db))\ndef norm_cell(val):\n\t# strip everything out leaving just the numbers.\n\t# prefix with a 1 if not already done\n\tif not val:\n\t\treturn ''\n\tfinal = ''\n\tfor i in val:\n\t\tif i == '@':\n\t\t\tbreak\n\t\tif i in '0123456789':\n\t\t\tfinal += i\n\tif not final:\n\t\treturn None\n\tif final[0] != '1':\n\t\tfinal = '1' + final\n\treturn final\nclass Game(SQLObject):\n\tclass sqlmeta:\n\t\tregistry = NAMESPACE\n\tstarted\t\t= BoolCol(default=False)\n\ttime\t\t= DateTimeCol(default=datetime.datetime.now)\n\tstring\t\t= StringCol(default=None)\n\tnumber\t\t= IntCol(default=None)\n\tdef _set_started(self, val):\n\t\tself.time = datetime.datetime.now()\n\t\tself._SO_set_started(val)\n\tclass started_class(object):\n\t\tdef __init__(self, index):\n\t\t\tself.i = index\n\t\tdef __get__(self, obj, objtype):\n\t\t\treturn Game.select(Game.q.id == self.i)[0].started\n\t\tdef __set__(self, obj, value):\n\t\t\tGame.select(Game.q.id == self.i)[0].started = value\n\t\t\tGame.select(Game.q.id == self.i)[0].time = datetime.datetime.now()\n\tclass value_class(object):\n\t\tdef __init__(self, attr, index):\n\t\t\tself.i = index\n\t\t\tself.attr = attr\n\t\tdef __get__(self, obj, objtype):\n\t\t\treturn getattr(Game.select(Game.q.id == self.i)[0], self.attr)\n\t\tdef __set__(self, obj, value):\n\t\t\tsetattr(Game.select(Game.q.id == self.i)[0], self.attr, value)\n\tis_started = started_class(1)\n\tis_reg\t   = started_class(2)\n\tgame_start = value_class('time',3)\n\tgame_end   = value_class('time',4)\n\tgame_rego  = value_class('time',5)\n\tit_email   = value_class('string',6)\n\thours_between_checkins = value_class('number',7)\n\tis_countdown  = started_class(8)\n\tcountdown_time = value_class('time',9)\n\t@staticmethod\n\tdef toggle_game():\n\t\tGame.select(Game.q.id == 1)[0].started = not Game.select(Game.q.id == 1)[0].started\n\t@staticmethod\n\tdef toggle_reg():\n\t\tGame.select(Game.q.id == 2)[0].started = not Game.select(Game.q.id == 2)[0].started\n\t@staticmethod\n\tdef toggle_countdown():\n\t\tGame.select(Game.q.id == 8)[0].started = not Game.select(Game.q.id == 8)[0].started\ntry:\n\tGame = Game.select()[0]\nexcept:\n\tpass\n\nDEFAULT_LIFETIME = 300\nclass Session(InheritableSQLObject):\n\tclass sqlmeta:\n\t\tregistry = NAMESPACE\n\tskey\t\t = StringCol(length=32,varchar=True,unique=True,notNone=True,default=lambda:uuid.uuid4().get_hex())\n\texpires\t\t = DateTimeCol(notNone=True,default=lambda:datetime.datetime.now()+datetime.timedelta(0,DEFAULT_LIFETIME))\n\tttl\t\t\t = IntCol(default=DEFAULT_LIFETIME)\n\tlanguage\t = EnumCol(enumValues=['e','f'],default='e')\n\tuser\t\t = ForeignKey('User',default=None)\n\terror\t\t = StringCol(default=None)\n\tdata\t\t = StringCol(default=None)\n\t\n\t@staticmethod\n\tdef grab(key, attr='skey'):\n\t\ts = Session.select(getattr(Session.q, attr) == key)[0]\n\t\tu = s.user\n\t\tif datetime.datetime.now() > s.expires:\t\t# expired\n\t\t\t# destroy and expire it\n\t\t\ts.destroySelf()\n\t\t\ts = Session(user=u)\n\t\ts.update_expires()\n\t\treturn s\n\t\t\n\tdef update_expires(self):\n\t\tself.expires = datetime.datetime.now() + datetime.timedelta(0, self.ttl)\n\t\t\n\t@staticmethod\n\tdef session(user):\n\t\tu = user\n\t\tif isinstance(u, basestring):\n\t\t\tu = User.get_user(u)\n\t\tif not u:\n\t\t\treturn None\n\t\tif Session.select(Session.q.user == u).count() == 0:\n\t\t\ts = Session(user=u)\n\t\telse:\n\t\t\ts = Session.grab(u, 'user')\n\t\treturn s\n\t\nclass User(InheritableSQLObject):\n\tclass sqlmeta:\n\t\tregistry = NAMESPACE\n\tname\t\t = StringCol(length=50,varchar=True,notNone=True)\n\tusername\t = StringCol(length=25,varchar=True,unique=True,notNone=True)\n\thashed_pass\t = StringCol(notNone=True)\n\tlanguage\t = EnumCol(enumValues=['e','f'],default='e')\n\tstudent_num\t = IntCol(unique=True,notNone=True)\n\temail\t\t = StringCol(length=50,varchar=True,unique=True,notNone=True)\n\ttwitter\t\t = StringCol(length=50,varchar=True,unique=True,default=None)\n\tcell\t\t = StringCol(length=11,varchar=True,unique=True,default=None)\n\tcreation_time= DateTimeCol(default=datetime.datetime.now)\n\tdef to_dict(self):\n\t\treturn dict([(x,getattr(self, x)) for x in self.sqlmeta.columns if \n\t\t\t\t\t\t(not isinstance(self.sqlmeta.columns[x], SOForeignKey) and not self.sqlmeta.columns[x].name == 'childName')])\n\tdef _set_hashed_pass(self, pas):\n\t\tself._SO_set_hashed_pass(bcrypt.hashpw(pas, bcrypt.gensalt()))\n\tdef verify_pass(self, pas):\n\t\treturn self.hashed_pass == bcrypt.hashpw(pas, self.hashed_pass)\n\tdef change_pass(self, old, new):\n\t\tif not self.verify_pass(old):\n\t\t\treturn False\n\t\tself.hashed_pass = new\n\t\treturn True\n\tdef _set_cell(self, val):\n\t\tself._SO_set_cell(None if not val else norm_cell(val))\n\t@staticmethod\n\tdef from_id(num):\n\t\ttry:\n\t\t\treturn User.select(User.q.id == num)[0]\n\t\texcept:\n\t\t\treturn None\n\t@staticmethod\n\tdef from_student_num(num):\n\t\ttry:\n\t\t\treturn User.select(User.q.student_num == num)[0]\n\t\texcept:\n\t\t\treturn None\n\t@staticmethod\n\tdef from_username(uname):\n\t\ttry:\n\t\t\treturn User.select(User.q.username == uname)[0]\n\t\texcept:\n\t\t\treturn None\n\t@staticmethod\n\tdef from_twitter(twit):\n\t\tif not twit:\n\t\t\treturn None\n\t\ttry:\n\t\t\treturn User.select(User.q.twitter == twit)[0]\n\t\texcept:\n\t\t\treturn None\n\t@staticmethod\n\tdef from_email(email):\n\t\ttry:\n\t\t\treturn User.select(User.q.email == email)[0]\n\t\texcept:\n\t\t\treturn None\n\t@staticmethod\n\tdef from_cell(cell):\n\t\tif not cell:\n\t\t\treturn None\n\t\tcell = norm_cell(cell)\n\t\tif not cell:\n\t\t\treturn None\n\t\ttry:\n\t\t\treturn User.select(User.q.cell == cell)[0]\n\t\texcept:\n\t\t\treturn None\n\t@staticmethod\n\tdef get_user(v):\n\t\tif isinstance(v, User):\n\t\t\treturn v\n\t\telif isinstance(v, str):\n\t\t\treturn User.from_username(v) or User.from_twitter(v) or User.from_email(v) or User.from_cell(v)\n\t\telif isinstance(v, int):\n\t\t\t# num is large: 12345.  Probably a student number\n\t\t\tif v > 10000:\n\t\t\t\treturn User.from_student_num(v)\n\t\t\telse:\n\t\t\t\treturn User.from_id(v)\nlocations = ['cby','ucu','cafealt','manual','twitter','email','internet','admin','unset']\nstates = ['human','zombie','inactive','banned']\nclass Player(User):\n\tclass sqlmeta:\n\t\tregistry = NAMESPACE\n\tstate\t\t\t = EnumCol(enumValues=states,default='human',notNone=True)\n\tgame_id\t\t\t = StringCol(length=10,varchar=True,unique=True,default=None)\n\tkills\t\t\t = SQLMultipleJoin('Tag',joinColumn='tagger_id')\n\tdeaths\t\t\t = SQLMultipleJoin('Tag',joinColumn='taggee_id')\n\tcheckins\t\t = SQLMultipleJoin('Checkin',joinColumn='player_id',orderBy='time')\n\tcures\t\t\t = SQLMultipleJoin('Cure',joinColumn='player_id',orderBy='time')\n\tsignedin\t\t = BoolCol(default=False,notNone=True)\n\tsignedin_time\t\t = DateTimeCol(default=None)\n\tliability\t\t = BoolCol(default=False)\n\tsafety\t\t\t = BoolCol(default=False)\n\tzero\t\t\t = BoolCol(default=False)\n\tdef to_dict(self):\n\t\td = super(Player, self).to_dict()\n\t\td.update(dict(\n\t\t\t\t\tstate=self.state,\n\t\t\t\t\tgame_id=self.game_id,\n\t\t\t\t\tkills=[x.to_dict() for x in self.kills],\n\t\t\t\t\tdeaths=[x.to_dict() for x in self.deaths],\n\t\t\t\t\tcheckins=[x.to_dict() for x in self.checkins],\n\t\t\t\t\tcures=[x.to_dict() for x in self.cures],\n\t\t\t\t\tsignedin=self.signedin,\n\t\t\t\t\tsignedin_time=self.signedin_time.isoformat()))\n\t\treturn d\n\tdef _set_zero(self, zero):\n\t\tfor i in Player.select(Player.q.id != self.id):\n\t\t\ti._SO_set_state('human')\n\t\t\ti._SO_set_zero(False)\n\t\tself._SO_set_zero(True)\n\tdef _set_state(self, state):\n\t\tself._SO_set_state(state)\n\t\ttry:\n\t\t\tif self.signedin:\n\t\t\t\tSnapshot(changer=self)\n\t\texcept:\n\t\t\tpass\n\tdef _get_game_id(self):\n\t\t# surprise! the game_id isn't completely random at all!\n\t\tif not self._SO_get_game_id():\n\t\t\ti = ('H' + hashlib.sha512(''.join([self.name,self.username,str(self.student_num),str(time.clock())])).hexdigest()[16:24] + 'Z').upper()\n\t\t\tself._SO_set_game_id(i)\n\t\treturn self._SO_get_game_id()\n\tdef _set_game_id(self, val):\n\t\t# attribute is immutable\n\t\treturn\n\tdef _set_signedin(self, v):\n\t\tself._SO_set_signedin(v)\n\t\tif v:\n\t\t\tSnapshot(changer=self)\t\t# add a snapshot, new user!!\n\t\t\tself.signedin_time = datetime.datetime.now()\n\tdef _get_last_checkin(self):\n\t\ttry:\n\t\t\treturn self.checkins[-1]\n\t\texcept:\n\t\t\treturn None\n\tdef _get_last_checkin_time(self):\n\t\ttry:\n\t\t\treturn self.checkins[-1].time\n\t\texcept:\n\t\t\treturn None\n\tdef _get_last_checkin_loc(self):\n\t\ttry:\n\t\t\treturn self.checkins[-1].location\n\t\texcept:\n\t\t\treturn None\n\tdef _get_did_webcheckin(self):\n\t\ttry:\n\t\t\treturn self.checkins.filter(Checkin.q.location==Checkin.location_internet).count() > 0\n\t\texcept:\n\t\t\treturn False\n\tdef _get_last_death(self):\n\t\ttry:\n\t\t\treturn self.deaths[-1]\n\t\texcept:\n\t\t\treturn None\n\tdef _get_last_kill(self):\n\t\ttry:\n\t\t\treturn self.kills[-1]\n\t\texcept:\n\t\t\treturn None\n\tdef _get_last_cure(self):\n\t\ttry:\n\t\t\treturn self.cures[-1]\n\t\texcept:\n\t\t\treturn None\n\tdef is_cured(self):\n\t\treturn self.cures.count() > 0\n\tdef is_zombie(self):\n\t\treturn self.state == self.state_zombie\n\tdef is_human(self):\n\t\treturn self.state == self.state_human\n\tdef kill(self):\n\t\tself.state = self.state_zombie\n\tdef cure(self):\n\t\tself.state = self.state_human\n\t@staticmethod\n\tdef from_game_id(gid):\n\t\ttry:\n\t\t\treturn Player.select(Player.q.game_id == gid)[0]\n\t\texcept:\n\t\t\treturn None\n\t@staticmethod\n\tdef get_player(v):\n\t\t# cell phones using email\n\t\tif isinstance(v, str) and '@' in v:\n\t\t\ttry:\n\t\t\t\ti = int(v[:v.find('@')])\n\t\t\t\tif len(str(i)) >= 10:\n\t\t\t\t\tv = str(i)\n\t\t\texcept:\n\t\t\t\tpass\n\t\t# prefer student num over cell phone\n\t\ttry:\n\t\t\ti = int(v)\n\t\t\tp = Player.from_student_num(i) or Player.from_cell(str(i))\n\t\t\tif p:\n\t\t\t\treturn p\n\t\texcept:\n\t\t\tpass\n\t\treturn v if isinstance(v,Player) else (Player.from_username(v) or Player.from_game_id(v) or Player.from_twitter(v) or Player.from_email(v))\n\tclass state_class(object):\n\t\tdef __init__(self, state):\n\t\t\tself.state = state\n\t\tdef __get__(self, obj, objtype):\n\t\t\t# military part excludes the military bot from normal operations\n\t\t\treturn Player.select(Player.q.state == self.state).filter(Player.q.signedin == True).filter(Player.q.username != \"military.militaire\")\n\tclass state_class2(object):\n\t\tdef __get__(self, obj, objtype):\n\t\t\t# military part excludes the military bot from normal operations\n\t\t\treturn Player.select().filter(Player.q.username != \"military.militaire\")\n\thumans  = state_class('human')\n\tzombies = state_class('zombie')\n\tusers = state_class2()\n\t\nclass Bounty(Player):\n\tclass sqlmeta:\n\t\tregistry = NAMESPACE\n\tdef _set_state(self, val):\n\t\tself._SO_set_state(val)\nclass Station(User):\n\tclass sqlmeta:\n\t\tregistry = NAMESPACE\n\tlocation\t\t = EnumCol(enumValues=locations,default='unset',notNone=True)\n\tdef to_dict(self):\n\t\td = super(Station, self).to_dict()\n\t\td['location'] = self.location\n\t\treturn d\nclass Admin(User):\n\tclass sqlmeta:\n\t\tregistry = NAMESPACE\n\tdef _get_location(self):\n\t\treturn Station.location_admin\n\tdef to_dict(self):\n\t\td = super(Admin, self).to_dict()\n\t\td['location'] = Station.location_admin\n\t\treturn d\nclass Tag(SQLObject):\n\tclass sqlmeta:\n\t\tregistry = NAMESPACE\n\ttime\t= DateTimeCol(default=datetime.datetime.now,notNone=True)\n\ttagger\t= ForeignKey('Player',notNone=True)\n\ttaggee  = ForeignKey('Player',notNone=True)\n\t# prevents spoofing of tags\n\tuid\t\t= StringCol(length=100,varchar=True,unique=True,notNone=True)\n\tdef to_dict(self):\n\t\treturn dict(time=self.time.isoformat(), tagger=self.tagger.username, taggee=self.taggee.username, uid=self.uid)\n\tdef _get_method(self):\n\t\ttry:\n\t\t\ti = int(self.uid)\n\t\t\treturn 'twitter'\n\t\texcept:\n\t\t\tpass\n\t\tif '_' in self.uid:\n\t\t\treturn self.uid[:self.uid.find('_')]\n\t\tif '@' in self.uid:\n\t\t\treturn 'email'\n\t\treturn 'unknown'\n\t@staticmethod\n\tdef from_uid(uid):\n\t\treturn Tag.select(Tag.q.uid == uid)[0]\n\t@staticmethod\n\tdef has_uid(uid):\n\t\treturn Tag.select(Tag.q.uid == uid).count() > 0\nclass Checkin(SQLObject):\n\tclass sqlmeta:\n\t\tregistry = NAMESPACE\n\ttime\t= DateTimeCol(default=datetime.datetime.now,notNone=True)\n\tlocation= EnumCol(enumValues=locations,notNone=True)\n\tplayer\t= ForeignKey('Player',notNone=True)\n\tdef to_dict(self):\n\t\treturn dict(time=self.time.isoformat(), location=self.location, player=self.player.username)\nclass Cure(SQLObject):\n\tclass sqlmeta:\n\t\tregistry = NAMESPACE\n\ttime\t\t= DateTimeCol(default=datetime.datetime.now,notNone=True)\n\texpiry\t\t= DateTimeCol()\n\tcard_id \t= StringCol(length=10,varchar=True,unique=True,default=None)\n\tused\t\t= BoolCol(default=False,notNone=True)\n\tdisqualified= BoolCol(default=False,notNone=True)\n\tplayer\t\t= ForeignKey('Player',default=None)\n\tdef _get_card_id(self):\n\t\t# surprise! the game_id isn't completely random at all!\n\t\tif not self._SO_get_card_id():\n\t\t\tself._SO_set_card_id(hashlib.sha512(''.join([self.time.isoformat(),str(self.used),str(self.disqualified),str(time.clock())])).hexdigest()[15:25])\n\t\treturn self._SO_get_card_id()\n\tdef to_dict(self):\n\t\treturn dict(time=self.time.isoformat(), expiry=self.expiry.isoformat(), card_id=self.card_id, used=self.used, disqualified=self.disqualified, player=self.player.username)\n\t@staticmethod\n\tdef from_cure_id(v):\n\t\ttry:\n\t\t\treturn Cure.select(Cure.q.card_id == v)[0]\n\t\texcept:\n\t\t\treturn None\n\t@staticmethod\n\tdef from_id(uid):\n\t\ttry:\n\t\t\treturn Cure.select(Cure.q.id == uid)[0]\n\t\texcept:\n\t\t\treturn None\n\t@staticmethod\n\tdef get_cure(v):\n\t\tif isinstance(v, Cure):\n\t\t\treturn v\n\t\telif isinstance(v, str):\n\t\t\treturn Cure.from_cure_id(v)\n\t\telif isinstance(v, int):\n\t\t\treturn Cure.from_id(v)\n\tclass state_class(object):\n\t\tdef __init__(self, used):\n\t\t\tself.used = used\n\t\tdef __get__(self, obj, objtype):\n\t\t\treturn Cure.select(Cure.q.used == self.used)\n\tused_cards = state_class(True)\n\tunused_cards = state_class(False)\nclass Post(SQLObject):\n\tclass sqlmeta:\n\t\tregistry = NAMESPACE\n\ttime\t\t\t= DateTimeCol(default=datetime.datetime.now,notNone=True)\n\ttitle_e\t\t\t= StringCol()\n\ttitle_f\t\t\t= StringCol()\n\tcontent_e\t\t= UnicodeCol()\n\tcontent_f\t\t= UnicodeCol()\n\tallow_comments \t= BoolCol(default=True,notNone=True)\n\tcomments\t\t= SQLMultipleJoin('Comment',joinColumn='post_id',orderBy='time')\n\tdef _get_html_e(self):\n\t\treturn markdown.markdown(self.content_e,output_format='html')\n\tdef _get_html_f(self):\n\t\treturn markdown.markdown(self.content_f)\n\t@staticmethod\n\tdef from_pid(pid):\n\t\treturn Post.select(Post.q.id == pid)[0]\n\tdef to_dict(self):\n\t\treturn dict(\n\t\t\ttime = self.time.isoformat(),\n\t\t\te = dict(\n\t\t\t\ttitle = self.title_e,\n\t\t\t\tcontent = self.html_e\n\t\t\t\t),\n\t\t\tf = dict(\n\t\t\t\ttitle = self.title_f,\n\t\t\t\tcontent = self.content_f\n\t\t\t\t)\n\t\t\t)\n\tdef delete(self):\n\t\tfor i in self.comments:\n\t\t\ti.destroySelf()\n\t\tself.destroySelf()\nclass Comment(SQLObject):\n\tclass sqlmeta:\n\t\tregistry = NAMESPACE\n\ttime\t\t= DateTimeCol(default=datetime.datetime.now,notNone=True)\n\tcontent\t\t= StringCol()\n\tuser\t\t= ForeignKey('User',notNone=True)\n\tpost\t\t= ForeignKey('Post',notNone=True)\n\tdef _get_html(self):\n\t\treturn markdown.markdown(self.content, safe_mode=\"remove\")\n\tdef to_dict(self):\n\t\treturn dict(\n\t\t\ttime = self.time.isoformat(),\n\t\t\tcontent = self.content,\n\t\t\tuser = dict(username = self.user.username, name = self.user.name),\n\t\t\t)\nclass Snapshot(SQLObject):\n\tclass sqlmeta:\n\t\tregistry = NAMESPACE\n\ttime\t\t = DateTimeCol(default=datetime.datetime.now)\n\tnum_humans\t = IntCol(default=Player.humans.count)\n\tnum_zombies\t = IntCol(default=Player.zombies.count)\n\tchanger\t\t = ForeignKey('Player',notNone=False)\n\tclass today_class(object):\n\t\tdef __get__(self, obj, objtype):\n\t\t\tnow = datetime.datetime.now()\n\t\t\tmorning = datetime.datetime(now.year, now.month, now.day, 0, 0, 0, 0)\n\t\t\tnight = datetime.datetime(now.year, now.month, now.day, 23, 59, 59, 999999)\n\t\t\treturn Snapshot.select(Snapshot.q.time > morning and Snapshot.q.time < night)\n\ttoday = today_class()\n\t@staticmethod\n\tdef points_after_hour(x):\n\t\tnow = datetime.datetime.now()\n\t\thour = datetime.datetime(now.year, now.month, now.day, x, 0, 0, 0)\n\t\thour_plus_one = hour + datetime.timedelta(0,0,0,0,0,1)\n\t\treturn Snapshot.points_between(hour, hour_plus_one)\n\t@staticmethod\n\tdef points_before_hour(x):\n\t\tnow = datetime.datetime.now()\n\t\thour = datetime.datetime(now.year, now.month, now.day, x, 0, 0, 0)\n\t\thour_minus_one = hour - datetime.timedelta(0,0,0,0,0,1)\n\t\treturn Snapshot.points_between(hour_minus_one, hour)\n\t@staticmethod\n\tdef points_after_date(x):\n\t\treturn Snapshot.points_between(x, x + datetime.timedelta(0,0,0,0,0,1))\n\t@staticmethod\n\tdef points_before_date(x):\n\t\treturn Snapshot.points_between(x - datetime.timedelta(0,0,0,0,0,1), x)\n\t@staticmethod\n\tdef points_between(a,b):\n\t\treturn Snapshot.select(Snapshot.q.time > a and Snapshot.q.time < b,orderBy=DESC(Snapshot.q.time))\n\tclass latest_class(object):\n\t\tdef __get__(self, obj, objtype):\n\t\t\treturn Snapshot.select(orderBy=DESC(Snapshot.q.time))[0]\n\tlatest = latest_class()\n\n# used to more efficiently store the scores for each person\n# if this didn't exist, we'd have to run a SELECT on Tag and count() for each player,\n# that could get slow really quickly\nclass Score(SQLObject):\n\tclass sqlmeta:\n\t\tregistry = NAMESPACE\n\tplayer = ForeignKey('Player')\n\tkills = IntCol()\n\t@staticmethod\n\tdef get_scorecard(player):\n\t\ttry:\n\t\t\treturn Score.select(Score.q.player == player)[0]\n\t\texcept:\n\t\t\treturn Score(player=player, kills=player.kills.count())\t\n\tclass latest_class(object):\n\t\tdef __get__(self, obj, objtype):\n\t\t\treturn Score.select(Score.q.player != Player.get_player('military.militaire'),orderBy=DESC(Score.q.kills))\n\ttop = latest_class()\t\nclass Twitter(SQLObject):\n\tclass sqlmeta:\n\t\tregistry = NAMESPACE\n\ttime = DateTimeCol(default=datetime.datetime.now)\n\tquery = StringCol()\n\tcontent = StringCol(default=None)\n\tdef _set_content(self, new_content):\n\t\tself.time = datetime.datetime.now()\n\t\tself._SO_set_content(new_content)\n\t\ndef set_class_enum(klass, var, array):\n\tfor i in array:\n\t\tsetattr(klass, var + '_' + i, i)\nset_class_enum(Player,'state', states)\nset_class_enum(Admin,'location',locations)\nset_class_enum(Station,'location',locations)\nset_class_enum(Checkin,'location',locations)\ndef createTables():\n\tGame.createTable(ifNotExists=True)\n\tUser.createTable(ifNotExists=True)\n\tAdmin.createTable(ifNotExists=True)\n\tStation.createTable(ifNotExists=True)\n\tPlayer.createTable(ifNotExists=True)\n\tTag.createTable(ifNotExists=True)\n\tCheckin.createTable(ifNotExists=True)\n\tCure.createTable(ifNotExists=True)\n\tPost.createTable(ifNotExists=True)\n\tComment.createTable(ifNotExists=True)\n\tSnapshot.createTable(ifNotExists=True)\n\tScore.createTable(ifNotExists=True)\n\tSession.createTable(ifNotExists=True)\n\tTwitter.createTable(ifNotExists=True)\ncreateTables()"]],"start1":0,"start2":0,"length1":0,"length2":18621}]],"length":18621}
{"contributors":[],"silentsave":false,"ts":1352618165040,"patch":[[{"diffs":[[0,"SWORD']\n"],[1,"if '\n"],[0,"sqlhub.p"]],"start1":635,"start2":635,"length1":16,"length2":21}]],"length":18626,"saved":false}
{"contributors":[],"silentsave":false,"ts":1352618317472,"patch":[[{"diffs":[[0," 'hvsi'\n"],[1,"proto = 'mysql'\n"],[0,"host = '"]],"start1":307,"start2":307,"length1":16,"length2":32},{"diffs":[[0,"D']\nif '"],[1,"stickshift' in os.getcwd():\n    proto = 'postgres'\n    db = 'd3m50vge7klt3i'\n    user = 'uhmmztavfuystp'\n    passw = 'al1dNyhYTANac3WDpfaztS4oze'"],[0,"\nsqlhub."]],"start1":655,"start2":655,"length1":16,"length2":161},{"diffs":[[0,"ForURI('"],[-1,"mysql"],[1,"%s"],[0,"://%s:%s"]],"start1":846,"start2":846,"length1":21,"length2":18},{"diffs":[[0,"/%s' % ("],[1,"proto, "],[0,"user, pa"]],"start1":867,"start2":867,"length1":16,"length2":23}]],"length":18791,"saved":false}
{"ts":1352618344882,"patch":[[{"diffs":[[0,"stgres'\n"],[1,"    host = 'ec2-54-243-181-33.compute-1.amazonaws.com'\n"],[0,"    db ="]],"start1":706,"start2":706,"length1":16,"length2":71}]],"length":18846,"saved":false}
{"ts":1352618621192,"patch":[[{"diffs":[[0,"\t\nclass "],[-1,"User"],[1,"Account"],[0,"(Inherit"]],"start1":4117,"start2":4117,"length1":20,"length2":23}]],"length":18849,"saved":false}
{"ts":1352618630843,"patch":[[{"diffs":[[0,"'Game','"],[-1,"User"],[1,"Account"],[0,"','Playe"]],"start1":174,"start2":174,"length1":20,"length2":23}]],"length":18852,"saved":false}
{"ts":1352618692575,"patch":[[{"diffs":[[0,"\n\t\t\tu = "],[-1,"User"],[1,"Account"],[0,".get_use"]],"start1":3940,"start2":3940,"length1":20,"length2":23},{"diffs":[[0,"\treturn "],[-1,"User"],[1,"Account"],[0,".select("],[-1,"User"],[1,"Account"],[0,".q.id =="]],"start1":5392,"start2":5392,"length1":32,"length2":38},{"diffs":[[0,"\treturn "],[-1,"User"],[1,"Account"],[0,".select("],[-1,"User"],[1,"Account"],[0,".q.stude"]],"start1":5516,"start2":5516,"length1":32,"length2":38},{"diffs":[[0,"\treturn "],[-1,"User"],[1,"Account"],[0,".select("],[-1,"User"],[1,"Account"],[0,".q.usern"]],"start1":5648,"start2":5648,"length1":32,"length2":38},{"diffs":[[0,"\treturn "],[-1,"User"],[1,"Account"],[0,".select("],[-1,"User"],[1,"Account"],[0,".q.twitt"]],"start1":5807,"start2":5807,"length1":32,"length2":38},{"diffs":[[0,"\treturn "],[-1,"User"],[1,"Account"],[0,".select("],[-1,"User"],[1,"Account"],[0,".q.email"]],"start1":5933,"start2":5933,"length1":32,"length2":38},{"diffs":[[0,"urn "],[-1,"User"],[1,"Account"],[0,".select("],[-1,"User"],[1,"Account"],[0,".q.c"]],"start1":6145,"start2":6145,"length1":24,"length2":30},{"diffs":[[0,"ance(v, "],[-1,"User"],[1,"Account"],[0,"):\n\t\t\tre"]],"start1":6260,"start2":6260,"length1":20,"length2":23},{"diffs":[[0,":\n\t\t\treturn "],[-1,"User"],[1,"Account"],[0,".from_userna"]],"start1":6315,"start2":6315,"length1":28,"length2":31},{"diffs":[[0,"rname(v) or "],[-1,"User"],[1,"Account"],[0,".from_twitte"]],"start1":6343,"start2":6343,"length1":28,"length2":31},{"diffs":[[0,"itter(v) or "],[-1,"User"],[1,"Account"],[0,".from_email("]],"start1":6370,"start2":6370,"length1":28,"length2":31},{"diffs":[[0,"l(v) or "],[-1,"User"],[1,"Account"],[0,".from_ce"]],"start1":6399,"start2":6399,"length1":20,"length2":23},{"diffs":[[0,"\n\t\t\t\treturn "],[-1,"User"],[1,"Account"],[0,".from_studen"]],"start1":6524,"start2":6524,"length1":28,"length2":31},{"diffs":[[0,"\treturn "],[-1,"User"],[1,"Account"],[0,".from_id"]],"start1":6576,"start2":6576,"length1":20,"length2":23},{"diffs":[[0," Player("],[-1,"User"],[1,"Account"],[0,"):\n\tclas"]],"start1":6746,"start2":6746,"length1":20,"length2":23},{"diffs":[[0," = self."],[-1,"user"],[1,"Account"],[0,".usernam"]],"start1":15434,"start2":15434,"length1":20,"length2":23},{"diffs":[[0," = self."],[-1,"user"],[1,"Account"],[0,".name),\n"]],"start1":15464,"start2":15464,"length1":20,"length2":23},{"diffs":[[0,"=True)\n\t"],[-1,"User"],[1,"Account"],[0,".createT"]],"start1":18410,"start2":18410,"length1":20,"length2":23}]],"length":18924,"saved":false}
{"ts":1352618716027,"patch":[[{"diffs":[[0,"Station("],[-1,"User"],[1,"Account"],[0,"):\n\tclas"]],"start1":11005,"start2":11005,"length1":20,"length2":23},{"diffs":[[0,"s Admin("],[-1,"User"],[1,"Account"],[0,"):\n\tclas"]],"start1":11239,"start2":11239,"length1":20,"length2":23}]],"length":18930,"saved":false}
{"ts":1352618734571,"patch":[[{"diffs":[[0,"ignKey('"],[-1,"User"],[1,"Account"],[0,"',notNon"]],"start1":15170,"start2":15170,"length1":20,"length2":23}]],"length":18933,"saved":false}
{"ts":1352618747443,"patch":[[{"diffs":[[0," = self."],[-1,"Account"],[1,"user"],[0,".usernam"]],"start1":15443,"start2":15443,"length1":23,"length2":20},{"diffs":[[0," = self."],[-1,"Account"],[1,"user"],[0,".name),\n"]],"start1":15470,"start2":15470,"length1":23,"length2":20}]],"length":18927,"saved":false}
{"ts":1352618795446,"patch":[[{"diffs":[[0,"ey('"],[-1,"User"],[1,"Account"],[0,"',de"]],"start1":3392,"start2":3392,"length1":12,"length2":15}]],"length":18930,"saved":false}
